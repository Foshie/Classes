#use "arith.ml";;
#use "testUtils.ml";;

print_endline (try string_of_int(eval [] (Int 42)) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [] (Plus (Int 42, Int 13))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [] (Mult(Int 3, Plus(Int 2, Int 1)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [] (Minus(Int 2, Negate(Int 4)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [] (Plus(Var "x", Var "y"))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [] (Mult (Var "foo", Plus(Int 3, Var "baz")))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3)] (Int 42)) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3)] (Plus (Int 42, Int 13))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3)] (Mult(Int 3, Plus(Int 2, Int 1)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3)] (Minus(Int 2, Negate(Int 4)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3)] (Plus(Var "x", Var "y"))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3)] (Mult (Var "foo", Plus(Int 3, Var "baz")))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3);("y",4)] (Int 42)) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3);("y",4)] (Plus (Int 42, Int 13))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3);("y",4)] (Mult(Int 3, Plus(Int 2, Int 1)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3);("y",4)] (Minus(Int 2, Negate(Int 4)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3);("y",4)] (Plus(Var "x", Var "y"))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("x",3);("y",4)] (Mult (Var "foo", Plus(Int 3, Var "baz")))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10)] (Int 42)) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10)] (Plus (Int 42, Int 13))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10)] (Mult(Int 3, Plus(Int 2, Int 1)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10)] (Minus(Int 2, Negate(Int 4)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10)] (Plus(Var "x", Var "y"))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10)] (Mult (Var "foo", Plus(Int 3, Var "baz")))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10);("x",3);("baz",2)] (Int 42)) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10);("x",3);("baz",2)] (Plus (Int 42, Int 13))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10);("x",3);("baz",2)] (Mult(Int 3, Plus(Int 2, Int 1)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10);("x",3);("baz",2)] (Minus(Int 2, Negate(Int 4)))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10);("x",3);("baz",2)] (Plus(Var "x", Var "y"))) with Not_found -> "Not_found");;
print_endline (try string_of_int(eval [("foo",10);("x",3);("baz",2)] (Mult (Var "foo", Plus(Int 3, Var "baz")))) with Not_found -> "Not_found");;
